<?xml version="1.0" encoding="UTF-8"?>
<!--ps:日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

<!--configuration后面的
status：用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，会看到log4j2内部各种详细输出，OFF即不打印
monitorInterval：Log4j2能够自动检测修改配置文件和重新配置本身，设置间隔数 秒-->
<configuration monitorInterval="5" status="OFF">
    <!--变量配置-->
    <properties>
        <!--格式化输出:
        %F : Java类名
        %p/%level 日志级别
        %c/%logger Java全类名，eg:%logger{36}（{36}最长36个字符）
        %C/%class Logger调用者的全限定类名
        %d/%date{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间,输出到毫秒的时间
        %highlight 高亮颜色
        %l/%location 调用位置（输出语句所在的行数, 包括类名、方法名、文件名、行数）
        %L/%line 行号
        %m/%msg/%message 日志内容，即 logger.info("message")
        %M/%methode 调用方法（日志方法名） ***
        %maker/%marker的全限定名
        %n 输出平台相关的换行符,如'\n' '\r\n'
        %pid/%processId 进程ID
        %level/%p 日志级别，eg:%-5level(-5表示左对齐并且固定输出5个字符，如果不足在右边补空格)
        %r JVM启动后经过的微秒
        %t/%tn/%thread/%threadName 当前线程名称
        %T/%tid/%threadId 线程ID
        %tp/%threadPriority 线程优先级
        %x/%NDC 线程Context堆栈
        %hostName 本地机器名
        %hostAddress 本地ip地址

        %5 若字符长度小于5，则右边用空格填充
        %-5 若字符长度小于5，则左边用空格填充
        %.15 若字符长度超过15，截去多余字符，
        %15.15 若字符长度小于5，则右边用空格填充；若字符长度超过15，截去多余字符
        -->
        <property name="LOG_PATTERN" value="%style{%date{yyyy-MM-dd HH:mm:ss.SSS}}  %highlight{%-5level}%style{%pid}{magenta} --- [%15thread] %style{%-41logger{36}}{bright,cyan}:%highlight{%msg}%n%style{%throwable}{red}"/>
        <property name="FILE_PATH">/logs</property> <!--日志储存路径-->
        <property name="FILE_NAME">@pom.artifactId@</property> <!--文件名-->
    </properties>

    <!-- 定义所有的输出器 -->
    <appenders>
        <!--<console>输出到控制台，下面分别是 debug、info、error 级别的配置 -->
        <console name="InfoConsole" target="SYSTEM_OUT">
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式: PatternLayout：自定义形式显示,SimpleLayout：简单的形式显示,HTMLLayout：HTML表格显示-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
        </console>
        <Console name="DebugConsole" target="SYSTEM_OUT">
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
            <PatternLayout pattern="${LOG_PATTERN}" />
        </Console>
        <Console name="ErrorConsole" target="SYSTEM_OUT">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY" />
            <PatternLayout pattern="${LOG_PATTERN}" />
        </Console>


        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用-->
        <!--<File name="File" fileName="${FILE_PATH}/test.html" append="false">
            <HTMLLayout pattern="${LOG_PATTERN}"/>-->
        <!--<File name="File" fileName="${FILE_PATH}/test.log" append="false">
            <PatternLayout pattern="${LOG_PATTERN}"/>
        </File>-->


        <!-- 打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年-月建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="InfoRollingFile" fileName="${FILE_PATH}/${FILE_NAME}/info.log" filePattern="${FILE_PATH}/${FILE_NAME}-INFO-%d{yyyy-MM-dd}_%i.gz">
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>

        <RollingFile name="WarnRollingFile" fileName="${FILE_PATH}/${FILE_NAME}/warn.log" filePattern="${FILE_PATH}/${FILE_NAME}-WARN-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>

        <RollingFile name="ErrorRollingFile" fileName="${FILE_PATH}/${FILE_NAME}/error.log" filePattern="${FILE_PATH}/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>
    </appenders>

    <!--定义Loggers，appender才会生效：
    1.默认Root项目整体配置方式
    2.如果Logger有定义指定包的特殊配置,则该指定包按照Logger的配置打印-->
    <Loggers>
        <!-- Root节点用来指定项目整体的默认日志配置，此处最低级别level为 debug，整个项目的输出按照这个级别执行-->
        <Root level="info">
            <appenderRef ref="InfoConsole"/><!--启用控制台日志输出-->
            <appenderRef ref="InfoRollingFile" /><!--启用Info级别文件日志记录-->
            <appenderRef ref="WarnRollingFile" /><!--启用Warn级别文件日志记录-->
            <appenderRef ref="ErrorRollingFile"/><!--启用Error级别文件日志记录-->
            <!--<appenderRef ref="File"/>-->
        </Root>

        <!--Logger用来针对指定的package配置日志的形式，比如为指定包下的class指定不同的日志级别等。 -->
        <Logger name="org.mybatis" level="info" additivity="false"><!--过滤掉mybatis的一些无用的DEBUG信息-->
            <AppenderRef ref="InfoConsole"/>
            <AppenderRef ref="ErrorRollingFile"/>
        </Logger>
        <!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
        <Logger name="org.springframework" level="info" additivity="false"><!--过滤掉spring的一些无用的DEBUG信息-->
            <AppenderRef ref="ErrorConsole"/>
            <AppenderRef ref="ErrorRollingFile"/>
        </Logger>
    </Loggers>
</configuration>
